module BinRemNode

use int.Int
use bintree.Tree
use bintree.Occ
use bintree.Size


predicate binsearch (t:tree int) =
match t with
|Empty -> true
|Node a b c -> (forall i: int. mem i a -> i<=b) /\ (forall j: int. mem j c -> j > b)
                /\ binsearch a /\ binsearch c
end

predicate is_minimum (x: int) (t: tree int) =
  mem x t /\ forall e. mem e t -> x <= e

let rec insert (t: tree int) (x:int): (tree int)
requires {binsearch t /\ forall j: int. occ j t <= 1 /\ not mem x t}
variant {t}
ensures {(forall j : int. mem j t -> mem j result)
        /\ mem x result
        /\ binsearch result}
=
match t with
| Empty -> Node Empty x Empty 
| Node l y r -> if x < y then Node (insert l x) y r else
                begin
                assert{x>y};
                Node l y (insert r x) 
                end
end

end